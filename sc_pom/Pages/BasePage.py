# Generated by Selenium IDE
import pytest
import time
import json
import requests
from pprint import pprint
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from Utils import  request_utils, utils
from Utils.rpatch import rpatch 
import sys,re,os
try:
	import pyperclip
except:
    pass	



def savexp(xp,txt=None):
	_pth = os.path.dirname(os.path.abspath(__file__))
	afile = _pth + "/xpaths.py"
	if txt == None:
		_key = utils.generate_uuid_string()
	else:
		_key = txt	
	with open(afile, 'a') as f:
		print('%s=(By.XPATH,"%s")' % (_key,xp), file=f)





'''This class is the parent of all pages and contains very helpfull generic methods'''

class BasePage:
	def __init__(self,driver,env):
		self.driver = driver
		self.env = env

	def do_click(self,by_locator):
		WebDriverWait(self.driver,10).until(EC.visibility_of_element_located(by_locator)).click()


	def do_send_keys(self,by_locator,text):
		WebDriverWait(self.driver,10).until(EC.visibility_of_element_located(by_locator)).send_keys(text)


	def get_element_text(self,by_locator):
		element = WebDriverWait(self.driver,10).until(EC.visibility_of_element_located(by_locator))
		return element.text


	def is_enabled(self,by_locator,tiout = 10):
		element = WebDriverWait(self.driver,tiout).until(EC.visibility_of_element_located(by_locator))
		return bool(element)	


	def get_elem(self,by_locator,tiout = 10):
		element = WebDriverWait(self.driver,tiout).until(EC.visibility_of_element_located(by_locator))
		return element

    # src href
	def get_xpath(self):
		# Read the text from the clipboard
		tt = pyperclip.paste()
		xp_tag = re.findall('^<(.*?) ',tt)[0]
		xp_class = re.findall('class="(.*?)"',tt)
		xp_src = re.findall('src="(.*?)"',tt)
		xp_href = re.findall('href="(.*?)"',tt)



		if len(xp_class) > 0:
			xp_class = xp_class[0]
		else:
		    xp_class = None	

		if len(xp_src) > 0:
			xp_src = xp_src[0]
		else:
		    xp_src = None	
		if len(xp_href) > 0:
			xp_href = xp_href[0]
		else:
		    xp_href = None	

		xp_txt = re.findall('>(.*?)</%s>' % xp_tag,tt)
		if len(xp_txt) > 0:
			xp_txt = xp_txt[0]
		else:
		    xp_txt = None	




	    # preferances starting with tag + (text if avail) + (class if avail) == xp_target
	    # 1)  xp_target if all 3 done 
	    # 2)  xp_target + src 
	    # 3)  xp_target + href
	    # return what u have ... 

	    # we must have a tag
		xp_target = "//%s" % xp_tag

		if xp_class != None:
			xp_target += "[contains(@class,'" + xp_class + "')"

		if xp_txt != None:
			if "[" in xp_target:
				xp_target += " and contains(text(),'" + xp_txt + "')"
			else:	
				xp_target += "[contains(text(),'" + xp_txt + "')"

		#
		good_flag = False
		if xp_class != None and xp_txt != None:
			good_flag = True	# we good
		elif xp_src != None and good_flag == False:
			if "[" in xp_target:
				xp_target += " and contains(@src,'" + xp_src + "')"
			else:
				xp_target += "[contains(@src,'" + xp_src + "')"
			good_flag = True


		elif good_flag == False and xp_href != None:
			if "[" in xp_target:
				xp_target += " and contains(@href,'" + xp_href + "')"
			else:
				xp_target += "[contains(@href,'" + xp_href + "')"	

		# finally	
		xp_target += "]"	
		print (">>",xp_target)
		element = self.driver.find_element(By.XPATH,xp_target)
		element.xp = xp_target
		element.save = lambda x=None: savexp(element.xp,x)
		return element





