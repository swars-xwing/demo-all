# Generated by Selenium IDE
import pytest
import time
import json
import requests
from pprint import pprint
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from Utils import  request_utils, utils
from Utils.rpatch import rpatch 
from Pages.BasePage import BasePage 
import sys





class MainPage(BasePage):
	'''by locators here'''
	EMAIL = (By.ID,"cye-prax-input")
	EMAIL_SUBMIT = (By.ID,"cye-prax-button")
	WWO = (By.XPATH,"//span[contains(text(), 'SOLUTIONS')]") #'WHAT WE OFFER'
	pass_img = (By.XPATH,"//img[contains(@class,'attachment-large size-large') and contains(@src,'outcome-password.svg')]") 
	eng_learn_more = (By.XPATH,"//a[contains(@href,'/our-data') and contains(text(),'Learn more')]") 
	cye =  (By.XPATH,"//span[contains(@class,'elementor-button-text') and contains(text(),'Check Your Exposure')]") 
	check_your_exposure_button=(By.XPATH,"//span[contains(@class,'elementor-button-text') and contains(text(),'Check Your Exposure')]")
	password_image=(By.XPATH,"//img[contains(@class,'attachment-large size-large wp-image') and contains(@src,'outcome-password.svg')]")
	explore_data_partnerships_button=(By.XPATH,"//span[contains(@class,'elementor-button-text') and contains(text(),'Explore Data Partnerships')]")





	def __init__(self,driver,env):
		super().__init__(driver,env)
		if self.env == 'prod':
			self.URL = "https://spycloud.com"

			

	def main_home(self):
	 	self.driver.get(self.URL)	


	def item_locator(self,text):
		return (By.XPATH,"//span[contains(@class,'elementor-icon-list-text') and contains(text(),'%s')]" % text)

	def menu_wwo_select(self,item_txt):
		ac = ActionChains(self.driver)
		wwo = self.get_elem(self.WWO)
		ac.move_to_element(wwo).perform()
		loc = self.item_locator(item_txt)
		self.get_elem(loc).click()



	def spyc_email_hybrid(self,email,domain=False):
		if domain == False:
		  self.driver.get(self.URL)
		  report_start = 'Your Personal Risk'
		  report_end   = 'Exposures'
		  locator = (By.XPATH,"//strong[contains(text(),'Your Personal Risk')]")
		  
		else:  
		  self.driver.get(f"{self.URL}/check-your-exposure/")
		  report_start = 'Your Company Risk'
		  report_end   = 'Credentials'
		  locator = (By.XPATH,"//strong[contains(text(),'Your Company Risk')]")
		  


		self.driver.set_window_size(1200, 1000)
		self.do_send_keys(self.EMAIL,email)
		self.do_click(self.EMAIL_SUBMIT)
		if self.is_enabled(locator,tiout= 60) == True:
				print('++ bam ... ') 

		else: 		
			pytest.fail("we did not find the locator after submitting email")
		    	

		z = self.driver.find_element(By.XPATH, "/html/body").text
		if 'your real-time darknet exposure details' in z:
		  zlist = z.split('\n')
		  zst = zlist.index(report_start)
		  zend = zlist.index(report_end)
		  data = zlist[zst:zend]
		  print("+++ >>>>>>>>",zlist[zst:zend])
		else:
		  print("--- something is wrong")  


		if domain == False:
		  r = self.spyc_personal_email_exposure(email)
		  assert r.getVal('data.freemailReport.personalIdentityExposureRisk.otherMessages') in data
		  assert str(r.getVal('data.freemailReport.personalBreachExposures.count')) in data
		  assert r.getVal('data.freemailReport.personalMostRecentExposure.otherMessages') in data
		else:
		  r = data  
		#  
		return r 


	def spyc_personal_email_exposure(self,email):
		hdr = {"Content-Type": "application/json"}
		pdict = {
		"operationName": "FreemailReport",
		"variables": {
		  "email": email,
		  "executionType": "CYE-FE: https://spycloud.com"
		},
		"query": "query FreemailReport($email: String!, $executionType: String!) {\n  freemailReport(email: $email, executionType: $executionType) {\n    personalIdentityExposureRisk {\n      isPresent\n      count\n      message\n      otherMessages\n      errorMessage\n      __typename\n    }\n    personalBreachExposures {\n      isPresent\n      count\n      message\n      otherMessages\n      errorMessage\n      __typename\n    }\n    personalMostRecentExposure {\n      isPresent\n      count\n      message\n      otherMessages\n      errorMessage\n      __typename\n    }\n    __typename\n  }\n}"
		}
		r = requests.post("https://cye-api.spycloud.com/graphql",json=pdict,headers=hdr )
		rpatch(r)
		return r





